---
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";

export interface Props {
  episode: CollectionEntry<"podcast">;
  number: number;
}

const { episode, number } = Astro.props as Props;
const isCurrentEpisode =
  episode.data.slug === Astro.url.pathname.split("/").pop();
---

<a
  href={`/podcast/${episode.data.slug}`}
  class="block"
  data-category={episode.data.category.toLowerCase()}
>
  <li
    class="group relative cursor-pointer overflow-hidden rounded-lg bg-white transition-colors hover:bg-gray-50"
  >
    <div
      class="absolute -right-1 -top-1 text-5xl font-extrabold text-gray-500/5"
    >
      #{number}
    </div>
    {
      isCurrentEpisode && (
        <div class="absolute inset-x-0 -bottom-8 flex items-center justify-evenly opacity-5">
          <svg class="w-full" viewBox="0 0 60 16">
            {Array.from({ length: 20 }).map((_, i) => (
              <rect
                fill="fill-[#E2E7EE]"
                x={1 + i * 3}
                y="2"
                width="2"
                height="12"
              />
            ))}
          </svg>
        </div>
      )
    }
    <div class="relative flex items-center space-x-4 p-4">
      <div class="rounded-md border-2 border-black bg-white p-1">
        {
          !isCurrentEpisode ? (
            <Icon name="play" class="h-4 w-4 text-black" />
          ) : (
            <Icon name="pause" class="h-4 w-4 text-black" />
          )
        }
      </div>
      <div class="flex-1 overflow-hidden">
        <div class="overflow-hidden whitespace-nowrap">
          <p
            class="group-hover:pr-full inline-block text-lg font-bold text-gray-900 group-hover:animate-marquee"
          >
            {episode.data.title}
          </p>
        </div>
        <div class="flex flex-row justify-between text-sm text-gray-500">
          <p class="text-sm text-gray-500">{episode.data.dateString}</p>
          <p class="text-sm text-gray-500">{episode.data.duration}</p>
        </div>
      </div>
    </div>
  </li>
</a>

<style>
  rect {
    transform-origin: bottom;
    animation: scale 1.2s cubic-bezier(0.4, 0, 0.2, 1) infinite;
  }

  rect:nth-child(4n + 1) {
    animation-delay: 0s;
  }

  rect:nth-child(4n + 2) {
    animation-delay: 0.2s;
  }

  rect:nth-child(4n + 3) {
    animation-delay: 0.4s;
  }

  rect:nth-child(4n) {
    animation-delay: 0.6s;
  }

  @keyframes scale {
    0%,
    100% {
      transform: scaleY(0.5);
    }
    50% {
      transform: scaleY(0.8);
    }
  }
</style>
