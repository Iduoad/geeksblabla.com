---
import { Icon } from "astro-icon/components";

import { getCollection } from "astro:content";
import EpisodesListItem from "./episodes-list-item.astro";
import { getPodcastCategories } from "@/lib/podcast-utils";

const podcast = await getCollection("podcast");
const sortedPodcast = podcast.sort(
  (a, b) => b.data.date.getTime() - a.data.date.getTime()
);

const categories = getPodcastCategories(sortedPodcast).sort(
  (a, b) => b.count - a.count
);
---

<!-- Add toggle button for mobile -->
<button
  id="episodes-drawer-toggle"
  class="fixed bottom-4 left-4 z-[102] rounded-full bg-black p-3 text-white shadow-lg md:hidden"
  aria-label="Toggle episodes list"
>
  <svg
    class="list-icon h-6 w-6"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M4 6h16M4 12h16M4 18h16"></path>
  </svg>
  <svg
    class="close-icon hidden h-6 w-6"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M6 18L18 6M6 6l12 12"></path>
  </svg>
</button>

<div
  class="fixed left-0 top-0 z-[101] h-[calc(100vh)] w-[85%] max-w-[430px] -translate-x-full transform bg-[#E2E7EE] shadow-md transition-transform duration-300 ease-in-out md:sticky md:top-0 md:w-full md:translate-x-0"
  id="episodes-list-container"
>
  <div class="p-4 pb-4">
    <div class="relative">
      <input
        type="text"
        placeholder="Search episodes"
        class="w-full rounded-full bg-white py-2 pl-10 pr-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <Icon
        name="search"
        class="absolute left-3 top-2.5 h-5 w-5 text-gray-400"
      />
    </div>

    <div class="mt-4 flex flex-wrap gap-2">
      {
        categories.map(category => (
          <button
            class="category-filter rounded-full bg-white px-3 py-1 text-sm font-medium uppercase text-gray-700 transition-colors hover:bg-black hover:text-white"
            data-category={category.name.toLowerCase()}
          >
            {category.name}({category.count})
          </button>
        ))
      }
    </div>
  </div>
  <ul
    class="max-h-[calc(100vh-160px)] space-y-2 overflow-y-auto p-4 pb-12 [&::-webkit-scrollbar-thumb]:bg-gray-500/50 [&::-webkit-scrollbar]:w-[3px]"
    id="episodes-list"
  >
    {
      sortedPodcast.map((episode, index) => (
        <EpisodesListItem
          episode={episode}
          number={sortedPodcast.length - index}
        />
      ))
    }
  </ul>
</div>

<!-- Add overlay for mobile -->
<div
  id="episodes-drawer-overlay"
  class="fixed inset-0 z-30 hidden bg-black/50 md:hidden"
>
</div>

<!-- Scroll to top when scrolling inside the list to make sure we are giving the user a smooth experience -->
<script>
  const container = document.getElementById("episodes-list-container");
  const list = document.getElementById("episodes-list");
  if (window.innerWidth >= 768) {
    list?.addEventListener("scroll", () => {
      if (list.scrollTop > 0) {
        container?.scrollIntoView({ behavior: "smooth" });
      }
    });
  }
</script>

<!-- Category filtering : when clicking on a category, filter the episodes and highlight the active category -->
<script>
  import { startViewTransition } from "@/lib/utils";

  const categoryButtons = document.querySelectorAll(".category-filter");
  const episodes = document.querySelectorAll("#episodes-list > a");
  let activeCategory: string | null = null;

  categoryButtons.forEach(button => {
    button.addEventListener("click", () => {
      const category = button.getAttribute("data-category");

      // Toggle active state
      if (activeCategory === category) {
        activeCategory = null;
        button.classList.remove("bg-black", "text-white");
        button.classList.add("bg-white", "text-gray-700");
        // Show all episodes
        episodes.forEach(episode => {
          episode.classList.remove("hidden");
        });
      } else {
        // Remove active state from previous button
        categoryButtons.forEach(btn => {
          btn.classList.remove("bg-black", "text-white");
          btn.classList.add("bg-white", "text-gray-700");
        });

        // Add active state to clicked button
        button.classList.remove("bg-white", "text-gray-700");
        button.classList.add("bg-black", "text-white");
        activeCategory = category;

        startViewTransition(() => {
          // Filter episodes
          episodes.forEach(episode => {
            if (
              episode.getAttribute("data-category")?.toLowerCase() ===
              activeCategory?.toLowerCase()
            ) {
              episode.classList.remove("hidden");
            } else {
              episode.classList.add("hidden");
            }
          });
        });
      }
    });
  });
</script>

<!-- Drawer functionality -->
<script>
  const drawerToggle = document.getElementById("episodes-drawer-toggle");
  const drawerContainer = document.getElementById("episodes-list-container");
  const overlay = document.getElementById("episodes-drawer-overlay");
  const listIcon = drawerToggle?.querySelector(".list-icon");
  const closeIcon = drawerToggle?.querySelector(".close-icon");

  function toggleDrawer() {
    drawerContainer?.classList.toggle("-translate-x-full");
    overlay?.classList.toggle("hidden");
    listIcon?.classList.toggle("hidden");
    closeIcon?.classList.toggle("hidden");
    document.body.style.overflow =
      document.body.style.overflow === "hidden" ? "auto" : "hidden";
  }

  function closeDrawer() {
    drawerContainer?.classList.remove("translate-x-0");
    drawerContainer?.classList.add("-translate-x-full");
    overlay?.classList.add("hidden");
    listIcon?.classList.remove("hidden");
    closeIcon?.classList.add("hidden");
    document.body.style.overflow = "auto";
  }

  drawerToggle?.addEventListener("click", toggleDrawer);
  overlay?.addEventListener("click", closeDrawer);

  // Close drawer on wider screens
  window.addEventListener("resize", () => {
    if (window.innerWidth >= 768) {
      closeDrawer();
    }
  });
</script>
