---
import { Icon } from "astro-icon/components";

import { getCollection } from "astro:content";
import EpisodesListItem from "./episodes-list-item.astro";
import { getPodcastCategories } from "@/lib/podcast-utils";

const podcast = await getCollection("podcast");
const sortedPodcast = podcast.sort(
  (a, b) => b.data.date.getTime() - a.data.date.getTime()
);

const categories = getPodcastCategories(sortedPodcast).sort(
  (a, b) => b.count - a.count
);

const allCategories = [
  { name: "All", count: sortedPodcast.length },
  ...categories,
];
---

<!-- Add toggle button for mobile -->
<button
  id="episodes-drawer-toggle"
  class="fixed bottom-4 left-4 z-[102] rounded-full bg-black p-3 text-white shadow-lg md:hidden"
  aria-label="Toggle episodes list"
>
  <svg
    class="list-icon h-6 w-6"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M4 6h16M4 12h16M4 18h16"></path>
  </svg>
  <svg
    class="close-icon hidden h-6 w-6"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M6 18L18 6M6 6l12 12"></path>
  </svg>
</button>

<div
  class="fixed left-0 top-0 z-[101] h-[calc(100vh)] w-[85%] max-w-[430px] -translate-x-full transform bg-[#E2E7EE] shadow-md transition-transform duration-300 ease-in-out md:sticky md:top-0 md:w-full md:translate-x-0"
  id="episodes-list-container"
>
  <div class="p-4 pb-4">
    <div class="relative">
      <input
        type="text"
        placeholder="Search episodes"
        class="w-full rounded-full bg-white py-2 pl-10 pr-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <Icon
        name="search"
        class="absolute left-3 top-2.5 h-5 w-5 text-gray-400"
      />
    </div>

    <div id="category-filter-buttons" class="mt-4 flex flex-wrap gap-2">
      {
        allCategories.map(category => (
          <button
            class="category-filter rounded-lg bg-[#D3DAE5] px-3 py-1 text-sm font-medium text-gray-700 transition-colors hover:bg-[#114997] hover:text-white"
            data-filter={category.name.toLowerCase()}
          >
            {category.name.charAt(0).toUpperCase() +
              category.name.slice(1).toLowerCase()}
            ({category.count})
          </button>
        ))
      }
    </div>
  </div>
  <ul
    class="max-h-[calc(100vh-160px)] space-y-2 overflow-y-auto p-4 pb-12 [&::-webkit-scrollbar-thumb]:bg-gray-500/50 [&::-webkit-scrollbar]:w-[3px]"
    id="episodes-list"
  >
    {
      sortedPodcast.map((episode, index) => (
        <EpisodesListItem
          episode={episode}
          number={sortedPodcast.length - index}
        />
      ))
    }
    <div
      class="absolute bottom-0 left-0 right-0 flex justify-center bg-gradient-to-t from-white/90 to-white/10 p-4"
      aria-label="Scroll controls"
      id="scroll-control"
    >
      <button
        class="rounded-full bg-black p-3 text-white opacity-70 transition-transform hover:opacity-100"
        id="scroll-button"
      >
        <Icon
          name="arrow-down"
          class="h-6 w-6 transition-transform"
          id="scroll-icon"
        />
      </button>
    </div>
  </ul>
</div>

<!-- Add overlay for mobile -->
<div
  id="episodes-drawer-overlay"
  class="fixed inset-0 z-30 hidden bg-black/50 md:hidden"
>
</div>

<!-- Scroll to top when scrolling inside the list to make sure we are giving the user a smooth experience -->
<script>
  const container = document.getElementById("episodes-list-container");
  const list = document.getElementById("episodes-list");
  if (window.innerWidth >= 768) {
    list?.addEventListener("scroll", () => {
      if (list.scrollTop > 0) {
        container?.scrollIntoView({ behavior: "smooth" });
      }
    });
  }
</script>

<style>
  .active {
    background-color: #114997;
    color: white;
  }
</style>

<!-- Category filtering : when clicking on a category, filter the episodes and highlight the active category -->
<script>
  import { startViewTransition } from "@/lib/utils";

  const categoryButtons = document.querySelectorAll(".category-filter");
  const categoryFilterContainer = document.getElementById(
    "category-filter-buttons"
  );
  const episodes = document.querySelectorAll("#episodes-list > li");
  let episodeIndex = 0;

  episodes.forEach(episode => {
    // @ts-expect-error not sure what going with style property here
    episode.style.viewTransitionName = `episode-${++episodeIndex}`;
  });

  categoryButtons.forEach(button => {
    button.addEventListener("click", e => {
      const episodeCategory = button.getAttribute("data-filter");

      startViewTransition(() => {
        updateActiveButton(e.target as HTMLElement);
        filterEpisodes(episodeCategory || "all");
      });
    });
  });

  function updateActiveButton(newButton: HTMLElement) {
    categoryFilterContainer
      ?.querySelector(".active")
      ?.classList.remove("active");
    newButton.classList.add("active");
  }

  function filterEpisodes(filter: string) {
    episodes.forEach(episode => {
      // get each conferences category
      const episodeCategory = episode.getAttribute("data-category");

      // check if that category matches with the filter
      if (filter === "all" || filter === episodeCategory) {
        episode.removeAttribute("hidden");
      } else {
        episode.setAttribute("hidden", "");
      }
    });
  }
</script>

<!-- Drawer functionality -->
<script>
  const drawerToggle = document.getElementById("episodes-drawer-toggle");
  const drawerContainer = document.getElementById("episodes-list-container");
  const overlay = document.getElementById("episodes-drawer-overlay");
  const listIcon = drawerToggle?.querySelector(".list-icon");
  const closeIcon = drawerToggle?.querySelector(".close-icon");

  function toggleDrawer() {
    drawerContainer?.classList.toggle("-translate-x-full");
    overlay?.classList.toggle("hidden");
    listIcon?.classList.toggle("hidden");
    closeIcon?.classList.toggle("hidden");
    document.body.style.overflow =
      document.body.style.overflow === "hidden" ? "auto" : "hidden";
  }

  function closeDrawer() {
    drawerContainer?.classList.remove("translate-x-0");
    drawerContainer?.classList.add("-translate-x-full");
    overlay?.classList.add("hidden");
    listIcon?.classList.remove("hidden");
    closeIcon?.classList.add("hidden");
    document.body.style.overflow = "auto";
  }

  drawerToggle?.addEventListener("click", toggleDrawer);
  overlay?.addEventListener("click", closeDrawer);

  // Close drawer on wider screens
  window.addEventListener("resize", () => {
    if (window.innerWidth >= 768) {
      closeDrawer();
    }
  });
</script>

<!-- Add scroll control functionality -->
<script>
  const list = document.getElementById("episodes-list");
  const scrollButton = document.getElementById("scroll-button");
  const scrollIcon = document.getElementById("scroll-icon");

  let isAtBottom = false;

  function checkScrollPosition() {
    if (!list) return;

    const atBottom =
      list.scrollHeight - list.scrollTop <= list.clientHeight + 50;

    if (atBottom !== isAtBottom) {
      isAtBottom = atBottom;
      if (isAtBottom) {
        scrollIcon?.style.setProperty("transform", "rotate(180deg)");
      } else {
        scrollIcon?.style.setProperty("transform", "rotate(0deg)");
      }
    }
  }

  function handleScroll() {
    if (!list) return;

    if (isAtBottom) {
      // Scroll to top
      list.scrollTo({
        top: 0,
        behavior: "smooth",
      });
    } else {
      // Scroll to bottom
      list.scrollTo({
        top: list.scrollTop + window.innerHeight,
        behavior: "smooth",
      });
    }
  }

  list?.addEventListener("scroll", checkScrollPosition);
  scrollButton?.addEventListener("click", handleScroll);

  // Initial check
  checkScrollPosition();
</script>

<!-- View transitions  with astro, we need to persist the scroll position for body and list-->
<script>
  let bodyScrollPosition = 0;
  let listScrollPosition = 0;

  function setActiveEpisodeItem() {
    // set old active item to false
    const playingEpisodeItem = document.querySelector("a[data-playing=true]");
    if (playingEpisodeItem) {
      playingEpisodeItem.setAttribute("data-playing", "false");
    }

    // get the new active episode item by checking the url pathname
    // searching for the href attribute that match the new pathname
    // add data-playing attribute with value true to the new active episode item
    const newPathname = window.location.pathname;
    // get the new episode item
    const activeEpisodeItem = document.querySelector(
      `a[href='${newPathname}']`
    );
    if (activeEpisodeItem) {
      activeEpisodeItem?.setAttribute("data-playing", "true");
    }
  }

  document.addEventListener("astro:before-swap", () => {
    const list = document.getElementById("episodes-list");
    bodyScrollPosition = window.scrollY;
    listScrollPosition = list?.scrollTop || 0;
  });

  document.addEventListener("astro:after-swap", () => {
    const list = document.getElementById("episodes-list");
    window.scrollTo(0, bodyScrollPosition);
    if (list) {
      list.scrollTop = listScrollPosition;
    }
    setActiveEpisodeItem();
  });
</script>

<script>
  document.addEventListener("astro:page-load", () => {
    const seekToTimestamp = () => {
      console.log("DOMContentLoaded");
      const youtubeVideo = document.querySelector(
        "youtube-video"
      ) as HTMLVideoElement;
      console.log("youtubeVideo", youtubeVideo);
      const hash = window.location.hash;
      if (hash && hash.startsWith("#")) {
        console.log("hash", hash);
        const seconds = parseInt(hash.slice(1), 10);
        if (!isNaN(seconds) && youtubeVideo) {
          console.log("seeking to", youtubeVideo);
          youtubeVideo.currentTime = seconds;
        }
      }
    };

    // Initial check on page load
    seekToTimestamp();

    // Listen for hash changes(clicks from notes)
    document.addEventListener("hashchange", seekToTimestamp);
  });
</script>

<script>
  console.log("rerun", window);
  document.addEventListener("hashchange", () => {
    console.log("hashchange");
  });
</script>
